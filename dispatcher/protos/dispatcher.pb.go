// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.4
// source: dispatcher.proto

package protos

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SessionStateEnum int32

const (
	SessionStateEnum_RUNNING      SessionStateEnum = 0
	SessionStateEnum_TEMP_NO_TASK SessionStateEnum = 1
	SessionStateEnum_END_TASK     SessionStateEnum = 2
)

// Enum value maps for SessionStateEnum.
var (
	SessionStateEnum_name = map[int32]string{
		0: "RUNNING",
		1: "TEMP_NO_TASK",
		2: "END_TASK",
	}
	SessionStateEnum_value = map[string]int32{
		"RUNNING":      0,
		"TEMP_NO_TASK": 1,
		"END_TASK":     2,
	}
)

func (x SessionStateEnum) Enum() *SessionStateEnum {
	p := new(SessionStateEnum)
	*p = x
	return p
}

func (x SessionStateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionStateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dispatcher_proto_enumTypes[0].Descriptor()
}

func (SessionStateEnum) Type() protoreflect.EnumType {
	return &file_dispatcher_proto_enumTypes[0]
}

func (x SessionStateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionStateEnum.Descriptor instead.
func (SessionStateEnum) EnumDescriptor() ([]byte, []int) {
	return file_dispatcher_proto_rawDescGZIP(), []int{0}
}

type TaskStateEnum int32

const (
	TaskStateEnum_FINISHED TaskStateEnum = 0
	TaskStateEnum_REQUEUE  TaskStateEnum = 1
)

// Enum value maps for TaskStateEnum.
var (
	TaskStateEnum_name = map[int32]string{
		0: "FINISHED",
		1: "REQUEUE",
	}
	TaskStateEnum_value = map[string]int32{
		"FINISHED": 0,
		"REQUEUE":  1,
	}
)

func (x TaskStateEnum) Enum() *TaskStateEnum {
	p := new(TaskStateEnum)
	*p = x
	return p
}

func (x TaskStateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dispatcher_proto_enumTypes[1].Descriptor()
}

func (TaskStateEnum) Type() protoreflect.EnumType {
	return &file_dispatcher_proto_enumTypes[1]
}

func (x TaskStateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStateEnum.Descriptor instead.
func (TaskStateEnum) EnumDescriptor() ([]byte, []int) {
	return file_dispatcher_proto_rawDescGZIP(), []int{1}
}

type GetTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *GetTaskRequest) Reset() {
	*x = GetTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatcher_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRequest) ProtoMessage() {}

func (x *GetTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dispatcher_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return file_dispatcher_proto_rawDescGZIP(), []int{0}
}

func (x *GetTaskRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type WrappedTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId           string           `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TaskId              string           `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	SerializedInnerTask []byte           `protobuf:"bytes,3,opt,name=serialized_inner_task,json=serializedInnerTask,proto3" json:"serialized_inner_task,omitempty"`
	SessionState        SessionStateEnum `protobuf:"varint,4,opt,name=session_state,json=sessionState,proto3,enum=Microsoft.Telepathy.ProtoBuf.SessionStateEnum" json:"session_state,omitempty"`
}

func (x *WrappedTask) Reset() {
	*x = WrappedTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatcher_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WrappedTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WrappedTask) ProtoMessage() {}

func (x *WrappedTask) ProtoReflect() protoreflect.Message {
	mi := &file_dispatcher_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WrappedTask.ProtoReflect.Descriptor instead.
func (*WrappedTask) Descriptor() ([]byte, []int) {
	return file_dispatcher_proto_rawDescGZIP(), []int{1}
}

func (x *WrappedTask) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *WrappedTask) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *WrappedTask) GetSerializedInnerTask() []byte {
	if x != nil {
		return x.SerializedInnerTask
	}
	return nil
}

func (x *WrappedTask) GetSessionState() SessionStateEnum {
	if x != nil {
		return x.SessionState
	}
	return SessionStateEnum_RUNNING
}

type SendResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId             string        `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	TaskId                string        `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	ClientId              string        `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	TaskState             TaskStateEnum `protobuf:"varint,4,opt,name=task_state,json=taskState,proto3,enum=Microsoft.Telepathy.ProtoBuf.TaskStateEnum" json:"task_state,omitempty"`
	SerializedInnerResult []byte        `protobuf:"bytes,5,opt,name=serialized_inner_result,json=serializedInnerResult,proto3" json:"serialized_inner_result,omitempty"`
}

func (x *SendResultRequest) Reset() {
	*x = SendResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatcher_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendResultRequest) ProtoMessage() {}

func (x *SendResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dispatcher_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendResultRequest.ProtoReflect.Descriptor instead.
func (*SendResultRequest) Descriptor() ([]byte, []int) {
	return file_dispatcher_proto_rawDescGZIP(), []int{2}
}

func (x *SendResultRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SendResultRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *SendResultRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SendResultRequest) GetTaskState() TaskStateEnum {
	if x != nil {
		return x.TaskState
	}
	return TaskStateEnum_FINISHED
}

func (x *SendResultRequest) GetSerializedInnerResult() []byte {
	if x != nil {
		return x.SerializedInnerResult
	}
	return nil
}

var File_dispatcher_proto protoreflect.FileDescriptor

var file_dispatcher_proto_rawDesc = []byte{
	0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1c, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65,
	0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66,
	0x1a, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xce, 0x01, 0x0a, 0x0b, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x53, 0x0a, 0x0d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54,
	0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75,
	0x66, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0xec, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0a, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2b, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65,
	0x70, 0x61, 0x74, 0x68, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x74, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a,
	0x3f, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x02,
	0x2a, 0x2a, 0x0a, 0x0d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x45, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x01, 0x32, 0xce, 0x01, 0x0a,
	0x0a, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2c, 0x2e,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61,
	0x74, 0x68, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68,
	0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x55, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74,
	0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x27, 0x5a,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0xaa, 0x02, 0x1c, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dispatcher_proto_rawDescOnce sync.Once
	file_dispatcher_proto_rawDescData = file_dispatcher_proto_rawDesc
)

func file_dispatcher_proto_rawDescGZIP() []byte {
	file_dispatcher_proto_rawDescOnce.Do(func() {
		file_dispatcher_proto_rawDescData = protoimpl.X.CompressGZIP(file_dispatcher_proto_rawDescData)
	})
	return file_dispatcher_proto_rawDescData
}

var file_dispatcher_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dispatcher_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_dispatcher_proto_goTypes = []interface{}{
	(SessionStateEnum)(0),     // 0: Microsoft.Telepathy.ProtoBuf.SessionStateEnum
	(TaskStateEnum)(0),        // 1: Microsoft.Telepathy.ProtoBuf.TaskStateEnum
	(*GetTaskRequest)(nil),    // 2: Microsoft.Telepathy.ProtoBuf.GetTaskRequest
	(*WrappedTask)(nil),       // 3: Microsoft.Telepathy.ProtoBuf.WrappedTask
	(*SendResultRequest)(nil), // 4: Microsoft.Telepathy.ProtoBuf.SendResultRequest
	(*empty.Empty)(nil),       // 5: google.protobuf.Empty
}
var file_dispatcher_proto_depIdxs = []int32{
	0, // 0: Microsoft.Telepathy.ProtoBuf.WrappedTask.session_state:type_name -> Microsoft.Telepathy.ProtoBuf.SessionStateEnum
	1, // 1: Microsoft.Telepathy.ProtoBuf.SendResultRequest.task_state:type_name -> Microsoft.Telepathy.ProtoBuf.TaskStateEnum
	2, // 2: Microsoft.Telepathy.ProtoBuf.Dispatcher.GetWrappedTask:input_type -> Microsoft.Telepathy.ProtoBuf.GetTaskRequest
	4, // 3: Microsoft.Telepathy.ProtoBuf.Dispatcher.SendResult:input_type -> Microsoft.Telepathy.ProtoBuf.SendResultRequest
	3, // 4: Microsoft.Telepathy.ProtoBuf.Dispatcher.GetWrappedTask:output_type -> Microsoft.Telepathy.ProtoBuf.WrappedTask
	5, // 5: Microsoft.Telepathy.ProtoBuf.Dispatcher.SendResult:output_type -> google.protobuf.Empty
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_dispatcher_proto_init() }
func file_dispatcher_proto_init() {
	if File_dispatcher_proto != nil {
		return
	}
	file_telepathy_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dispatcher_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispatcher_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WrappedTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispatcher_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dispatcher_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dispatcher_proto_goTypes,
		DependencyIndexes: file_dispatcher_proto_depIdxs,
		EnumInfos:         file_dispatcher_proto_enumTypes,
		MessageInfos:      file_dispatcher_proto_msgTypes,
	}.Build()
	File_dispatcher_proto = out.File
	file_dispatcher_proto_rawDesc = nil
	file_dispatcher_proto_goTypes = nil
	file_dispatcher_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DispatcherClient is the client API for Dispatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DispatcherClient interface {
	GetWrappedTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*WrappedTask, error)
	SendResult(ctx context.Context, in *SendResultRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type dispatcherClient struct {
	cc grpc.ClientConnInterface
}

func NewDispatcherClient(cc grpc.ClientConnInterface) DispatcherClient {
	return &dispatcherClient{cc}
}

func (c *dispatcherClient) GetWrappedTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*WrappedTask, error) {
	out := new(WrappedTask)
	err := c.cc.Invoke(ctx, "/Microsoft.Telepathy.ProtoBuf.Dispatcher/GetWrappedTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dispatcherClient) SendResult(ctx context.Context, in *SendResultRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Microsoft.Telepathy.ProtoBuf.Dispatcher/SendResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DispatcherServer is the server API for Dispatcher service.
type DispatcherServer interface {
	GetWrappedTask(context.Context, *GetTaskRequest) (*WrappedTask, error)
	SendResult(context.Context, *SendResultRequest) (*empty.Empty, error)
}

// UnimplementedDispatcherServer can be embedded to have forward compatible implementations.
type UnimplementedDispatcherServer struct {
}

func (*UnimplementedDispatcherServer) GetWrappedTask(context.Context, *GetTaskRequest) (*WrappedTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWrappedTask not implemented")
}
func (*UnimplementedDispatcherServer) SendResult(context.Context, *SendResultRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResult not implemented")
}

func RegisterDispatcherServer(s *grpc.Server, srv DispatcherServer) {
	s.RegisterService(&_Dispatcher_serviceDesc, srv)
}

func _Dispatcher_GetWrappedTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).GetWrappedTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Microsoft.Telepathy.ProtoBuf.Dispatcher/GetWrappedTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).GetWrappedTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dispatcher_SendResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DispatcherServer).SendResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Microsoft.Telepathy.ProtoBuf.Dispatcher/SendResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DispatcherServer).SendResult(ctx, req.(*SendResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dispatcher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Microsoft.Telepathy.ProtoBuf.Dispatcher",
	HandlerType: (*DispatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWrappedTask",
			Handler:    _Dispatcher_GetWrappedTask_Handler,
		},
		{
			MethodName: "SendResult",
			Handler:    _Dispatcher_SendResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dispatcher.proto",
}
