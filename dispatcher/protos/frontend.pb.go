// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.4
// source: frontend.proto

package protos

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetResultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ClientId  string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *GetResultsRequest) Reset() {
	*x = GetResultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResultsRequest) ProtoMessage() {}

func (x *GetResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResultsRequest.ProtoReflect.Descriptor instead.
func (*GetResultsRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{0}
}

func (x *GetResultsRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *GetResultsRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type EndTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *EndTasksRequest) Reset() {
	*x = EndTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontend_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndTasksRequest) ProtoMessage() {}

func (x *EndTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_frontend_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndTasksRequest.ProtoReflect.Descriptor instead.
func (*EndTasksRequest) Descriptor() ([]byte, []int) {
	return file_frontend_proto_rawDescGZIP(), []int{1}
}

func (x *EndTasksRequest) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

var File_frontend_proto protoreflect.FileDescriptor

var file_frontend_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1c, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65,
	0x70, 0x61, 0x74, 0x68, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x74, 0x65, 0x6c, 0x65,
	0x70, 0x61, 0x74, 0x68, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4f, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x29, 0x0a, 0x0f,
	0x45, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x32, 0xfa, 0x02, 0x0a, 0x0d, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x4d, 0x0a, 0x08, 0x53, 0x65, 0x6e,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x27, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
	0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x51, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x2d, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74,
	0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x6a, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x01, 0x12, 0x5b, 0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x35, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66,
	0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x75, 0x66, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x32, 0xd2, 0x03, 0x0a, 0x0f, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x6f, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61,
	0x74, 0x68, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6f, 0x0a, 0x0d, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70,
	0x61, 0x74, 0x68, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x59, 0x0a, 0x0c, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x81, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x2e, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68,
	0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e,
	0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x75, 0x66, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x1f, 0xaa, 0x02, 0x1c, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68,
	0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_frontend_proto_rawDescOnce sync.Once
	file_frontend_proto_rawDescData = file_frontend_proto_rawDesc
)

func file_frontend_proto_rawDescGZIP() []byte {
	file_frontend_proto_rawDescOnce.Do(func() {
		file_frontend_proto_rawDescData = protoimpl.X.CompressGZIP(file_frontend_proto_rawDescData)
	})
	return file_frontend_proto_rawDescData
}

var file_frontend_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_frontend_proto_goTypes = []interface{}{
	(*GetResultsRequest)(nil),        // 0: Microsoft.Telepathy.ProtoBuf.GetResultsRequest
	(*EndTasksRequest)(nil),          // 1: Microsoft.Telepathy.ProtoBuf.EndTasksRequest
	(*InnerTask)(nil),                // 2: Microsoft.Telepathy.ProtoBuf.InnerTask
	(*CloseBatchClientRequest)(nil),  // 3: Microsoft.Telepathy.ProtoBuf.CloseBatchClientRequest
	(*CreateSessionRequest)(nil),     // 4: Microsoft.Telepathy.ProtoBuf.CreateSessionRequest
	(*AttachSessionRequest)(nil),     // 5: Microsoft.Telepathy.ProtoBuf.AttachSessionRequest
	(*CloseSessionRequest)(nil),      // 6: Microsoft.Telepathy.ProtoBuf.CloseSessionRequest
	(*CreateBatchClientRequest)(nil), // 7: Microsoft.Telepathy.ProtoBuf.CreateBatchClientRequest
	(*empty.Empty)(nil),              // 8: google.protobuf.Empty
	(*InnerResult)(nil),              // 9: Microsoft.Telepathy.ProtoBuf.InnerResult
	(*SessionReply)(nil),             // 10: Microsoft.Telepathy.ProtoBuf.SessionReply
	(*CreateBatchClientReply)(nil),   // 11: Microsoft.Telepathy.ProtoBuf.CreateBatchClientReply
}
var file_frontend_proto_depIdxs = []int32{
	2,  // 0: Microsoft.Telepathy.ProtoBuf.FrontendBatch.SendTask:input_type -> Microsoft.Telepathy.ProtoBuf.InnerTask
	1,  // 1: Microsoft.Telepathy.ProtoBuf.FrontendBatch.EndTasks:input_type -> Microsoft.Telepathy.ProtoBuf.EndTasksRequest
	0,  // 2: Microsoft.Telepathy.ProtoBuf.FrontendBatch.GetResults:input_type -> Microsoft.Telepathy.ProtoBuf.GetResultsRequest
	3,  // 3: Microsoft.Telepathy.ProtoBuf.FrontendBatch.CloseBatch:input_type -> Microsoft.Telepathy.ProtoBuf.CloseBatchClientRequest
	4,  // 4: Microsoft.Telepathy.ProtoBuf.FrontendSession.CreateSession:input_type -> Microsoft.Telepathy.ProtoBuf.CreateSessionRequest
	5,  // 5: Microsoft.Telepathy.ProtoBuf.FrontendSession.AttachSession:input_type -> Microsoft.Telepathy.ProtoBuf.AttachSessionRequest
	6,  // 6: Microsoft.Telepathy.ProtoBuf.FrontendSession.CloseSession:input_type -> Microsoft.Telepathy.ProtoBuf.CloseSessionRequest
	7,  // 7: Microsoft.Telepathy.ProtoBuf.FrontendSession.CreateBatchClient:input_type -> Microsoft.Telepathy.ProtoBuf.CreateBatchClientRequest
	8,  // 8: Microsoft.Telepathy.ProtoBuf.FrontendBatch.SendTask:output_type -> google.protobuf.Empty
	8,  // 9: Microsoft.Telepathy.ProtoBuf.FrontendBatch.EndTasks:output_type -> google.protobuf.Empty
	9,  // 10: Microsoft.Telepathy.ProtoBuf.FrontendBatch.GetResults:output_type -> Microsoft.Telepathy.ProtoBuf.InnerResult
	8,  // 11: Microsoft.Telepathy.ProtoBuf.FrontendBatch.CloseBatch:output_type -> google.protobuf.Empty
	10, // 12: Microsoft.Telepathy.ProtoBuf.FrontendSession.CreateSession:output_type -> Microsoft.Telepathy.ProtoBuf.SessionReply
	10, // 13: Microsoft.Telepathy.ProtoBuf.FrontendSession.AttachSession:output_type -> Microsoft.Telepathy.ProtoBuf.SessionReply
	8,  // 14: Microsoft.Telepathy.ProtoBuf.FrontendSession.CloseSession:output_type -> google.protobuf.Empty
	11, // 15: Microsoft.Telepathy.ProtoBuf.FrontendSession.CreateBatchClient:output_type -> Microsoft.Telepathy.ProtoBuf.CreateBatchClientReply
	8,  // [8:16] is the sub-list for method output_type
	0,  // [0:8] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_frontend_proto_init() }
func file_frontend_proto_init() {
	if File_frontend_proto != nil {
		return
	}
	file_session_proto_init()
	file_telepathy_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_frontend_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontend_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_frontend_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_frontend_proto_goTypes,
		DependencyIndexes: file_frontend_proto_depIdxs,
		MessageInfos:      file_frontend_proto_msgTypes,
	}.Build()
	File_frontend_proto = out.File
	file_frontend_proto_rawDesc = nil
	file_frontend_proto_goTypes = nil
	file_frontend_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FrontendBatchClient is the client API for FrontendBatch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrontendBatchClient interface {
	// Send Request by streaming
	SendTask(ctx context.Context, opts ...grpc.CallOption) (FrontendBatch_SendTaskClient, error)
	// End requests and notify total number
	EndTasks(ctx context.Context, in *EndTasksRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get responses by streaming
	GetResults(ctx context.Context, in *GetResultsRequest, opts ...grpc.CallOption) (FrontendBatch_GetResultsClient, error)
	CloseBatch(ctx context.Context, in *CloseBatchClientRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type frontendBatchClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontendBatchClient(cc grpc.ClientConnInterface) FrontendBatchClient {
	return &frontendBatchClient{cc}
}

func (c *frontendBatchClient) SendTask(ctx context.Context, opts ...grpc.CallOption) (FrontendBatch_SendTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FrontendBatch_serviceDesc.Streams[0], "/Microsoft.Telepathy.ProtoBuf.FrontendBatch/SendTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &frontendBatchSendTaskClient{stream}
	return x, nil
}

type FrontendBatch_SendTaskClient interface {
	Send(*InnerTask) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type frontendBatchSendTaskClient struct {
	grpc.ClientStream
}

func (x *frontendBatchSendTaskClient) Send(m *InnerTask) error {
	return x.ClientStream.SendMsg(m)
}

func (x *frontendBatchSendTaskClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *frontendBatchClient) EndTasks(ctx context.Context, in *EndTasksRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Microsoft.Telepathy.ProtoBuf.FrontendBatch/EndTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendBatchClient) GetResults(ctx context.Context, in *GetResultsRequest, opts ...grpc.CallOption) (FrontendBatch_GetResultsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FrontendBatch_serviceDesc.Streams[1], "/Microsoft.Telepathy.ProtoBuf.FrontendBatch/GetResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &frontendBatchGetResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FrontendBatch_GetResultsClient interface {
	Recv() (*InnerResult, error)
	grpc.ClientStream
}

type frontendBatchGetResultsClient struct {
	grpc.ClientStream
}

func (x *frontendBatchGetResultsClient) Recv() (*InnerResult, error) {
	m := new(InnerResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *frontendBatchClient) CloseBatch(ctx context.Context, in *CloseBatchClientRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Microsoft.Telepathy.ProtoBuf.FrontendBatch/CloseBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontendBatchServer is the server API for FrontendBatch service.
type FrontendBatchServer interface {
	// Send Request by streaming
	SendTask(FrontendBatch_SendTaskServer) error
	// End requests and notify total number
	EndTasks(context.Context, *EndTasksRequest) (*empty.Empty, error)
	// Get responses by streaming
	GetResults(*GetResultsRequest, FrontendBatch_GetResultsServer) error
	CloseBatch(context.Context, *CloseBatchClientRequest) (*empty.Empty, error)
}

// UnimplementedFrontendBatchServer can be embedded to have forward compatible implementations.
type UnimplementedFrontendBatchServer struct {
}

func (*UnimplementedFrontendBatchServer) SendTask(FrontendBatch_SendTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method SendTask not implemented")
}
func (*UnimplementedFrontendBatchServer) EndTasks(context.Context, *EndTasksRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndTasks not implemented")
}
func (*UnimplementedFrontendBatchServer) GetResults(*GetResultsRequest, FrontendBatch_GetResultsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetResults not implemented")
}
func (*UnimplementedFrontendBatchServer) CloseBatch(context.Context, *CloseBatchClientRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseBatch not implemented")
}

func RegisterFrontendBatchServer(s *grpc.Server, srv FrontendBatchServer) {
	s.RegisterService(&_FrontendBatch_serviceDesc, srv)
}

func _FrontendBatch_SendTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FrontendBatchServer).SendTask(&frontendBatchSendTaskServer{stream})
}

type FrontendBatch_SendTaskServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*InnerTask, error)
	grpc.ServerStream
}

type frontendBatchSendTaskServer struct {
	grpc.ServerStream
}

func (x *frontendBatchSendTaskServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *frontendBatchSendTaskServer) Recv() (*InnerTask, error) {
	m := new(InnerTask)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FrontendBatch_EndTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendBatchServer).EndTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Microsoft.Telepathy.ProtoBuf.FrontendBatch/EndTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendBatchServer).EndTasks(ctx, req.(*EndTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendBatch_GetResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetResultsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FrontendBatchServer).GetResults(m, &frontendBatchGetResultsServer{stream})
}

type FrontendBatch_GetResultsServer interface {
	Send(*InnerResult) error
	grpc.ServerStream
}

type frontendBatchGetResultsServer struct {
	grpc.ServerStream
}

func (x *frontendBatchGetResultsServer) Send(m *InnerResult) error {
	return x.ServerStream.SendMsg(m)
}

func _FrontendBatch_CloseBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseBatchClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendBatchServer).CloseBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Microsoft.Telepathy.ProtoBuf.FrontendBatch/CloseBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendBatchServer).CloseBatch(ctx, req.(*CloseBatchClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FrontendBatch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Microsoft.Telepathy.ProtoBuf.FrontendBatch",
	HandlerType: (*FrontendBatchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EndTasks",
			Handler:    _FrontendBatch_EndTasks_Handler,
		},
		{
			MethodName: "CloseBatch",
			Handler:    _FrontendBatch_CloseBatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendTask",
			Handler:       _FrontendBatch_SendTask_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetResults",
			Handler:       _FrontendBatch_GetResults_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "frontend.proto",
}

// FrontendSessionClient is the client API for FrontendSession service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FrontendSessionClient interface {
	// Create session
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*SessionReply, error)
	// Attach session
	AttachSession(ctx context.Context, in *AttachSessionRequest, opts ...grpc.CallOption) (*SessionReply, error)
	// Close session
	CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Create session client queues
	CreateBatchClient(ctx context.Context, in *CreateBatchClientRequest, opts ...grpc.CallOption) (*CreateBatchClientReply, error)
}

type frontendSessionClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontendSessionClient(cc grpc.ClientConnInterface) FrontendSessionClient {
	return &frontendSessionClient{cc}
}

func (c *frontendSessionClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*SessionReply, error) {
	out := new(SessionReply)
	err := c.cc.Invoke(ctx, "/Microsoft.Telepathy.ProtoBuf.FrontendSession/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendSessionClient) AttachSession(ctx context.Context, in *AttachSessionRequest, opts ...grpc.CallOption) (*SessionReply, error) {
	out := new(SessionReply)
	err := c.cc.Invoke(ctx, "/Microsoft.Telepathy.ProtoBuf.FrontendSession/AttachSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendSessionClient) CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Microsoft.Telepathy.ProtoBuf.FrontendSession/CloseSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendSessionClient) CreateBatchClient(ctx context.Context, in *CreateBatchClientRequest, opts ...grpc.CallOption) (*CreateBatchClientReply, error) {
	out := new(CreateBatchClientReply)
	err := c.cc.Invoke(ctx, "/Microsoft.Telepathy.ProtoBuf.FrontendSession/CreateBatchClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontendSessionServer is the server API for FrontendSession service.
type FrontendSessionServer interface {
	// Create session
	CreateSession(context.Context, *CreateSessionRequest) (*SessionReply, error)
	// Attach session
	AttachSession(context.Context, *AttachSessionRequest) (*SessionReply, error)
	// Close session
	CloseSession(context.Context, *CloseSessionRequest) (*empty.Empty, error)
	// Create session client queues
	CreateBatchClient(context.Context, *CreateBatchClientRequest) (*CreateBatchClientReply, error)
}

// UnimplementedFrontendSessionServer can be embedded to have forward compatible implementations.
type UnimplementedFrontendSessionServer struct {
}

func (*UnimplementedFrontendSessionServer) CreateSession(context.Context, *CreateSessionRequest) (*SessionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (*UnimplementedFrontendSessionServer) AttachSession(context.Context, *AttachSessionRequest) (*SessionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachSession not implemented")
}
func (*UnimplementedFrontendSessionServer) CloseSession(context.Context, *CloseSessionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSession not implemented")
}
func (*UnimplementedFrontendSessionServer) CreateBatchClient(context.Context, *CreateBatchClientRequest) (*CreateBatchClientReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatchClient not implemented")
}

func RegisterFrontendSessionServer(s *grpc.Server, srv FrontendSessionServer) {
	s.RegisterService(&_FrontendSession_serviceDesc, srv)
}

func _FrontendSession_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendSessionServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Microsoft.Telepathy.ProtoBuf.FrontendSession/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendSessionServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendSession_AttachSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendSessionServer).AttachSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Microsoft.Telepathy.ProtoBuf.FrontendSession/AttachSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendSessionServer).AttachSession(ctx, req.(*AttachSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendSession_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendSessionServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Microsoft.Telepathy.ProtoBuf.FrontendSession/CloseSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendSessionServer).CloseSession(ctx, req.(*CloseSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrontendSession_CreateBatchClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBatchClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendSessionServer).CreateBatchClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Microsoft.Telepathy.ProtoBuf.FrontendSession/CreateBatchClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendSessionServer).CreateBatchClient(ctx, req.(*CreateBatchClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FrontendSession_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Microsoft.Telepathy.ProtoBuf.FrontendSession",
	HandlerType: (*FrontendSessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _FrontendSession_CreateSession_Handler,
		},
		{
			MethodName: "AttachSession",
			Handler:    _FrontendSession_AttachSession_Handler,
		},
		{
			MethodName: "CloseSession",
			Handler:    _FrontendSession_CloseSession_Handler,
		},
		{
			MethodName: "CreateBatchClient",
			Handler:    _FrontendSession_CreateBatchClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "frontend.proto",
}
