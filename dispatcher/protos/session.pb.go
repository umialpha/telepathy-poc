// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.4
// source: session.proto

package protos

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SessionInitInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName        string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceVersion     string `protobuf:"bytes,2,opt,name=service_version,json=serviceVersion,proto3" json:"service_version,omitempty"`
	Durable            bool   `protobuf:"varint,3,opt,name=durable,proto3" json:"durable,omitempty"`
	MaxServiceInstance int32  `protobuf:"varint,4,opt,name=max_service_instance,json=maxServiceInstance,proto3" json:"max_service_instance,omitempty"`
	SessionIdleTimeout int32  `protobuf:"varint,5,opt,name=session_idle_timeout,json=sessionIdleTimeout,proto3" json:"session_idle_timeout,omitempty"`
	ClientIdleTimeout  int32  `protobuf:"varint,6,opt,name=client_idle_timeout,json=clientIdleTimeout,proto3" json:"client_idle_timeout,omitempty"`
	SessionCreator     string `protobuf:"bytes,7,opt,name=session_creator,json=sessionCreator,proto3" json:"session_creator,omitempty"`
}

func (x *SessionInitInfo) Reset() {
	*x = SessionInitInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionInitInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInitInfo) ProtoMessage() {}

func (x *SessionInitInfo) ProtoReflect() protoreflect.Message {
	mi := &file_session_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInitInfo.ProtoReflect.Descriptor instead.
func (*SessionInitInfo) Descriptor() ([]byte, []int) {
	return file_session_proto_rawDescGZIP(), []int{0}
}

func (x *SessionInitInfo) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *SessionInitInfo) GetServiceVersion() string {
	if x != nil {
		return x.ServiceVersion
	}
	return ""
}

func (x *SessionInitInfo) GetDurable() bool {
	if x != nil {
		return x.Durable
	}
	return false
}

func (x *SessionInitInfo) GetMaxServiceInstance() int32 {
	if x != nil {
		return x.MaxServiceInstance
	}
	return 0
}

func (x *SessionInitInfo) GetSessionIdleTimeout() int32 {
	if x != nil {
		return x.SessionIdleTimeout
	}
	return 0
}

func (x *SessionInitInfo) GetClientIdleTimeout() int32 {
	if x != nil {
		return x.ClientIdleTimeout
	}
	return 0
}

func (x *SessionInitInfo) GetSessionCreator() string {
	if x != nil {
		return x.SessionCreator
	}
	return ""
}

type BatchClientIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ClientId  string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *BatchClientIdentity) Reset() {
	*x = BatchClientIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchClientIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchClientIdentity) ProtoMessage() {}

func (x *BatchClientIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_session_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchClientIdentity.ProtoReflect.Descriptor instead.
func (*BatchClientIdentity) Descriptor() ([]byte, []int) {
	return file_session_proto_rawDescGZIP(), []int{1}
}

func (x *BatchClientIdentity) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *BatchClientIdentity) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

type CreateSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionInitInfo *SessionInitInfo `protobuf:"bytes,1,opt,name=session_init_info,json=sessionInitInfo,proto3" json:"session_init_info,omitempty"`
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_session_proto_rawDescGZIP(), []int{2}
}

func (x *CreateSessionRequest) GetSessionInitInfo() *SessionInitInfo {
	if x != nil {
		return x.SessionInitInfo
	}
	return nil
}

type AttachSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *AttachSessionRequest) Reset() {
	*x = AttachSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachSessionRequest) ProtoMessage() {}

func (x *AttachSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachSessionRequest.ProtoReflect.Descriptor instead.
func (*AttachSessionRequest) Descriptor() ([]byte, []int) {
	return file_session_proto_rawDescGZIP(), []int{3}
}

func (x *AttachSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type CloseSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *CloseSessionRequest) Reset() {
	*x = CloseSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseSessionRequest) ProtoMessage() {}

func (x *CloseSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseSessionRequest.ProtoReflect.Descriptor instead.
func (*CloseSessionRequest) Descriptor() ([]byte, []int) {
	return file_session_proto_rawDescGZIP(), []int{4}
}

func (x *CloseSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type SessionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string           `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Info      *SessionInitInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	State     string           `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *SessionReply) Reset() {
	*x = SessionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionReply) ProtoMessage() {}

func (x *SessionReply) ProtoReflect() protoreflect.Message {
	mi := &file_session_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionReply.ProtoReflect.Descriptor instead.
func (*SessionReply) Descriptor() ([]byte, []int) {
	return file_session_proto_rawDescGZIP(), []int{5}
}

func (x *SessionReply) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SessionReply) GetInfo() *SessionInitInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *SessionReply) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type CreateBatchClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchClientInfo *BatchClientIdentity `protobuf:"bytes,1,opt,name=batch_client_info,json=batchClientInfo,proto3" json:"batch_client_info,omitempty"`
}

func (x *CreateBatchClientRequest) Reset() {
	*x = CreateBatchClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBatchClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBatchClientRequest) ProtoMessage() {}

func (x *CreateBatchClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBatchClientRequest.ProtoReflect.Descriptor instead.
func (*CreateBatchClientRequest) Descriptor() ([]byte, []int) {
	return file_session_proto_rawDescGZIP(), []int{6}
}

func (x *CreateBatchClientRequest) GetBatchClientInfo() *BatchClientIdentity {
	if x != nil {
		return x.BatchClientInfo
	}
	return nil
}

type CloseBatchClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchClientInfo *BatchClientIdentity `protobuf:"bytes,1,opt,name=batch_client_info,json=batchClientInfo,proto3" json:"batch_client_info,omitempty"`
}

func (x *CloseBatchClientRequest) Reset() {
	*x = CloseBatchClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseBatchClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseBatchClientRequest) ProtoMessage() {}

func (x *CloseBatchClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseBatchClientRequest.ProtoReflect.Descriptor instead.
func (*CloseBatchClientRequest) Descriptor() ([]byte, []int) {
	return file_session_proto_rawDescGZIP(), []int{7}
}

func (x *CloseBatchClientRequest) GetBatchClientInfo() *BatchClientIdentity {
	if x != nil {
		return x.BatchClientInfo
	}
	return nil
}

type CreateBatchClientReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsReady bool `protobuf:"varint,1,opt,name=is_ready,json=isReady,proto3" json:"is_ready,omitempty"`
}

func (x *CreateBatchClientReply) Reset() {
	*x = CreateBatchClientReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBatchClientReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBatchClientReply) ProtoMessage() {}

func (x *CreateBatchClientReply) ProtoReflect() protoreflect.Message {
	mi := &file_session_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBatchClientReply.ProtoReflect.Descriptor instead.
func (*CreateBatchClientReply) Descriptor() ([]byte, []int) {
	return file_session_proto_rawDescGZIP(), []int{8}
}

func (x *CreateBatchClientReply) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

type ClientEndOfTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchClientInfo    *BatchClientIdentity `protobuf:"bytes,1,opt,name=batch_client_info,json=batchClientInfo,proto3" json:"batch_client_info,omitempty"`
	TotalRequestNumber string               `protobuf:"bytes,2,opt,name=total_request_number,json=totalRequestNumber,proto3" json:"total_request_number,omitempty"`
}

func (x *ClientEndOfTaskRequest) Reset() {
	*x = ClientEndOfTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_session_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientEndOfTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientEndOfTaskRequest) ProtoMessage() {}

func (x *ClientEndOfTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_session_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientEndOfTaskRequest.ProtoReflect.Descriptor instead.
func (*ClientEndOfTaskRequest) Descriptor() ([]byte, []int) {
	return file_session_proto_rawDescGZIP(), []int{9}
}

func (x *ClientEndOfTaskRequest) GetBatchClientInfo() *BatchClientIdentity {
	if x != nil {
		return x.BatchClientInfo
	}
	return nil
}

func (x *ClientEndOfTaskRequest) GetTotalRequestNumber() string {
	if x != nil {
		return x.TotalRequestNumber
	}
	return ""
}

var File_session_proto protoreflect.FileDescriptor

var file_session_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1c, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70,
	0x61, 0x74, 0x68, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x02, 0x0a, 0x0f, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x75,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x75, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x6c,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x22, 0x51, 0x0a, 0x13, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x11,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x35, 0x0a, 0x14, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x34,
	0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54,
	0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75,
	0x66, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x79, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x11, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74,
	0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x75, 0x66, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x78, 0x0a, 0x17, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70,
	0x61, 0x74, 0x68, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x33, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x22, 0xa9, 0x01, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5d, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61,
	0x74, 0x68, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x0f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x32, 0x95, 0x05, 0x0a, 0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79, 0x2e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68,
	0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6f, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74,
	0x68, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x59, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x81, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x2e, 0x4d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65,
	0x6c, 0x65, 0x70, 0x61, 0x74, 0x68, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x61, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x2e, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68,
	0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x0f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x34, 0x2e,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x70, 0x61,
	0x74, 0x68, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x75, 0x66, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_session_proto_rawDescOnce sync.Once
	file_session_proto_rawDescData = file_session_proto_rawDesc
)

func file_session_proto_rawDescGZIP() []byte {
	file_session_proto_rawDescOnce.Do(func() {
		file_session_proto_rawDescData = protoimpl.X.CompressGZIP(file_session_proto_rawDescData)
	})
	return file_session_proto_rawDescData
}

var file_session_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_session_proto_goTypes = []interface{}{
	(*SessionInitInfo)(nil),          // 0: Microsoft.Telepathy.ProtoBuf.SessionInitInfo
	(*BatchClientIdentity)(nil),      // 1: Microsoft.Telepathy.ProtoBuf.BatchClientIdentity
	(*CreateSessionRequest)(nil),     // 2: Microsoft.Telepathy.ProtoBuf.CreateSessionRequest
	(*AttachSessionRequest)(nil),     // 3: Microsoft.Telepathy.ProtoBuf.AttachSessionRequest
	(*CloseSessionRequest)(nil),      // 4: Microsoft.Telepathy.ProtoBuf.CloseSessionRequest
	(*SessionReply)(nil),             // 5: Microsoft.Telepathy.ProtoBuf.SessionReply
	(*CreateBatchClientRequest)(nil), // 6: Microsoft.Telepathy.ProtoBuf.CreateBatchClientRequest
	(*CloseBatchClientRequest)(nil),  // 7: Microsoft.Telepathy.ProtoBuf.CloseBatchClientRequest
	(*CreateBatchClientReply)(nil),   // 8: Microsoft.Telepathy.ProtoBuf.CreateBatchClientReply
	(*ClientEndOfTaskRequest)(nil),   // 9: Microsoft.Telepathy.ProtoBuf.ClientEndOfTaskRequest
	(*empty.Empty)(nil),              // 10: google.protobuf.Empty
}
var file_session_proto_depIdxs = []int32{
	0,  // 0: Microsoft.Telepathy.ProtoBuf.CreateSessionRequest.session_init_info:type_name -> Microsoft.Telepathy.ProtoBuf.SessionInitInfo
	0,  // 1: Microsoft.Telepathy.ProtoBuf.SessionReply.info:type_name -> Microsoft.Telepathy.ProtoBuf.SessionInitInfo
	1,  // 2: Microsoft.Telepathy.ProtoBuf.CreateBatchClientRequest.batch_client_info:type_name -> Microsoft.Telepathy.ProtoBuf.BatchClientIdentity
	1,  // 3: Microsoft.Telepathy.ProtoBuf.CloseBatchClientRequest.batch_client_info:type_name -> Microsoft.Telepathy.ProtoBuf.BatchClientIdentity
	1,  // 4: Microsoft.Telepathy.ProtoBuf.ClientEndOfTaskRequest.batch_client_info:type_name -> Microsoft.Telepathy.ProtoBuf.BatchClientIdentity
	2,  // 5: Microsoft.Telepathy.ProtoBuf.SessionManager.CreateSession:input_type -> Microsoft.Telepathy.ProtoBuf.CreateSessionRequest
	3,  // 6: Microsoft.Telepathy.ProtoBuf.SessionManager.AttachSession:input_type -> Microsoft.Telepathy.ProtoBuf.AttachSessionRequest
	4,  // 7: Microsoft.Telepathy.ProtoBuf.SessionManager.CloseSession:input_type -> Microsoft.Telepathy.ProtoBuf.CloseSessionRequest
	6,  // 8: Microsoft.Telepathy.ProtoBuf.SessionManager.CreateBatchClient:input_type -> Microsoft.Telepathy.ProtoBuf.CreateBatchClientRequest
	7,  // 9: Microsoft.Telepathy.ProtoBuf.SessionManager.CloseBatchClient:input_type -> Microsoft.Telepathy.ProtoBuf.CloseBatchClientRequest
	9,  // 10: Microsoft.Telepathy.ProtoBuf.SessionManager.ClientEndOfTask:input_type -> Microsoft.Telepathy.ProtoBuf.ClientEndOfTaskRequest
	5,  // 11: Microsoft.Telepathy.ProtoBuf.SessionManager.CreateSession:output_type -> Microsoft.Telepathy.ProtoBuf.SessionReply
	5,  // 12: Microsoft.Telepathy.ProtoBuf.SessionManager.AttachSession:output_type -> Microsoft.Telepathy.ProtoBuf.SessionReply
	10, // 13: Microsoft.Telepathy.ProtoBuf.SessionManager.CloseSession:output_type -> google.protobuf.Empty
	8,  // 14: Microsoft.Telepathy.ProtoBuf.SessionManager.CreateBatchClient:output_type -> Microsoft.Telepathy.ProtoBuf.CreateBatchClientReply
	10, // 15: Microsoft.Telepathy.ProtoBuf.SessionManager.CloseBatchClient:output_type -> google.protobuf.Empty
	10, // 16: Microsoft.Telepathy.ProtoBuf.SessionManager.ClientEndOfTask:output_type -> google.protobuf.Empty
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_session_proto_init() }
func file_session_proto_init() {
	if File_session_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_session_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionInitInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchClientIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBatchClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseBatchClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBatchClientReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_session_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientEndOfTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_session_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_session_proto_goTypes,
		DependencyIndexes: file_session_proto_depIdxs,
		MessageInfos:      file_session_proto_msgTypes,
	}.Build()
	File_session_proto = out.File
	file_session_proto_rawDesc = nil
	file_session_proto_goTypes = nil
	file_session_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SessionManagerClient is the client API for SessionManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SessionManagerClient interface {
	// Create session
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*SessionReply, error)
	// Attach session
	AttachSession(ctx context.Context, in *AttachSessionRequest, opts ...grpc.CallOption) (*SessionReply, error)
	// Close session
	CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Create session client queues
	CreateBatchClient(ctx context.Context, in *CreateBatchClientRequest, opts ...grpc.CallOption) (*CreateBatchClientReply, error)
	// Close session client
	CloseBatchClient(ctx context.Context, in *CloseBatchClientRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Set end of request flag for one session client
	ClientEndOfTask(ctx context.Context, in *ClientEndOfTaskRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type sessionManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionManagerClient(cc grpc.ClientConnInterface) SessionManagerClient {
	return &sessionManagerClient{cc}
}

func (c *sessionManagerClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*SessionReply, error) {
	out := new(SessionReply)
	err := c.cc.Invoke(ctx, "/Microsoft.Telepathy.ProtoBuf.SessionManager/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagerClient) AttachSession(ctx context.Context, in *AttachSessionRequest, opts ...grpc.CallOption) (*SessionReply, error) {
	out := new(SessionReply)
	err := c.cc.Invoke(ctx, "/Microsoft.Telepathy.ProtoBuf.SessionManager/AttachSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagerClient) CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Microsoft.Telepathy.ProtoBuf.SessionManager/CloseSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagerClient) CreateBatchClient(ctx context.Context, in *CreateBatchClientRequest, opts ...grpc.CallOption) (*CreateBatchClientReply, error) {
	out := new(CreateBatchClientReply)
	err := c.cc.Invoke(ctx, "/Microsoft.Telepathy.ProtoBuf.SessionManager/CreateBatchClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagerClient) CloseBatchClient(ctx context.Context, in *CloseBatchClientRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Microsoft.Telepathy.ProtoBuf.SessionManager/CloseBatchClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionManagerClient) ClientEndOfTask(ctx context.Context, in *ClientEndOfTaskRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Microsoft.Telepathy.ProtoBuf.SessionManager/ClientEndOfTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionManagerServer is the server API for SessionManager service.
type SessionManagerServer interface {
	// Create session
	CreateSession(context.Context, *CreateSessionRequest) (*SessionReply, error)
	// Attach session
	AttachSession(context.Context, *AttachSessionRequest) (*SessionReply, error)
	// Close session
	CloseSession(context.Context, *CloseSessionRequest) (*empty.Empty, error)
	// Create session client queues
	CreateBatchClient(context.Context, *CreateBatchClientRequest) (*CreateBatchClientReply, error)
	// Close session client
	CloseBatchClient(context.Context, *CloseBatchClientRequest) (*empty.Empty, error)
	// Set end of request flag for one session client
	ClientEndOfTask(context.Context, *ClientEndOfTaskRequest) (*empty.Empty, error)
}

// UnimplementedSessionManagerServer can be embedded to have forward compatible implementations.
type UnimplementedSessionManagerServer struct {
}

func (*UnimplementedSessionManagerServer) CreateSession(context.Context, *CreateSessionRequest) (*SessionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (*UnimplementedSessionManagerServer) AttachSession(context.Context, *AttachSessionRequest) (*SessionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachSession not implemented")
}
func (*UnimplementedSessionManagerServer) CloseSession(context.Context, *CloseSessionRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSession not implemented")
}
func (*UnimplementedSessionManagerServer) CreateBatchClient(context.Context, *CreateBatchClientRequest) (*CreateBatchClientReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatchClient not implemented")
}
func (*UnimplementedSessionManagerServer) CloseBatchClient(context.Context, *CloseBatchClientRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseBatchClient not implemented")
}
func (*UnimplementedSessionManagerServer) ClientEndOfTask(context.Context, *ClientEndOfTaskRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientEndOfTask not implemented")
}

func RegisterSessionManagerServer(s *grpc.Server, srv SessionManagerServer) {
	s.RegisterService(&_SessionManager_serviceDesc, srv)
}

func _SessionManager_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagerServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Microsoft.Telepathy.ProtoBuf.SessionManager/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagerServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManager_AttachSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagerServer).AttachSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Microsoft.Telepathy.ProtoBuf.SessionManager/AttachSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagerServer).AttachSession(ctx, req.(*AttachSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManager_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagerServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Microsoft.Telepathy.ProtoBuf.SessionManager/CloseSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagerServer).CloseSession(ctx, req.(*CloseSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManager_CreateBatchClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBatchClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagerServer).CreateBatchClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Microsoft.Telepathy.ProtoBuf.SessionManager/CreateBatchClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagerServer).CreateBatchClient(ctx, req.(*CreateBatchClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManager_CloseBatchClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseBatchClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagerServer).CloseBatchClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Microsoft.Telepathy.ProtoBuf.SessionManager/CloseBatchClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagerServer).CloseBatchClient(ctx, req.(*CloseBatchClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManager_ClientEndOfTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientEndOfTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagerServer).ClientEndOfTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Microsoft.Telepathy.ProtoBuf.SessionManager/ClientEndOfTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagerServer).ClientEndOfTask(ctx, req.(*ClientEndOfTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SessionManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Microsoft.Telepathy.ProtoBuf.SessionManager",
	HandlerType: (*SessionManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _SessionManager_CreateSession_Handler,
		},
		{
			MethodName: "AttachSession",
			Handler:    _SessionManager_AttachSession_Handler,
		},
		{
			MethodName: "CloseSession",
			Handler:    _SessionManager_CloseSession_Handler,
		},
		{
			MethodName: "CreateBatchClient",
			Handler:    _SessionManager_CreateBatchClient_Handler,
		},
		{
			MethodName: "CloseBatchClient",
			Handler:    _SessionManager_CloseBatchClient_Handler,
		},
		{
			MethodName: "ClientEndOfTask",
			Handler:    _SessionManager_ClientEndOfTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session.proto",
}
